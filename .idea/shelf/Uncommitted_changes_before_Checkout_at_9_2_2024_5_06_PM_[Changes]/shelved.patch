Index: src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sd38.gymtiger.service.impl.user;\r\n\r\nimport com.sd38.gymtiger.dto.common.ProductAndValueDiscountDto;\r\nimport com.sd38.gymtiger.dto.common.ProductDetailAndValueDiscountDto;\r\nimport com.sd38.gymtiger.dto.common.impl.ProductDiscountHomeDtoImpl;\r\nimport com.sd38.gymtiger.dto.common.impl.ProductHomeDtoImpl;\r\nimport com.sd38.gymtiger.model.Product;\r\nimport com.sd38.gymtiger.model.ProductDetail;\r\nimport com.sd38.gymtiger.model.Size;\r\nimport com.sd38.gymtiger.repository.ColorRepository;\r\nimport com.sd38.gymtiger.repository.ProductDetailRepository;\r\nimport com.sd38.gymtiger.repository.ProductRepository;\r\nimport com.sd38.gymtiger.repository.user.ProductViewRepository;\r\nimport com.sd38.gymtiger.repository.user.UserSizeRepository;\r\nimport com.sd38.gymtiger.response.*;\r\nimport com.sd38.gymtiger.service.user.ProductViewService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class ProductViewServiceImpl implements ProductViewService {\r\n    @Autowired\r\n    private ProductViewRepository productViewRepository;\r\n\r\n    @Autowired\r\n    private ProductDetailRepository productDetailRepository;\r\n\r\n    @Autowired\r\n    private ColorRepository colorRepository;\r\n\r\n    @Autowired\r\n    private UserSizeRepository userSizeRepository;\r\n\r\n    @Autowired\r\n    private ProductRepository productRepository;\r\n\r\n    @Override\r\n    public List<Product> getAllProductView() {\r\n        return productViewRepository.getAllProductResponse();\r\n    }\r\n\r\n\r\n    @Override\r\n    public Product getOne(Integer id) {\r\n        Optional<Product> optional = productViewRepository.findById(id);\r\n        return optional.orElse(null);\r\n    }\r\n\r\n    @Override\r\n    public Page<ProductHomeResponse> getAllProductHomeResponse(int page) {\r\n        // 1. Lấy dữ liệu từ repository và chuyển đổi\r\n        List<ProductHomeDtoImpl> productHomeResponseDtoList = productViewRepository.getAllProductResponseHome()\r\n                .stream()                               // Chuyển đổi sang Stream để xử lý dễ dàng\r\n                .map(ProductHomeDtoImpl::toData)        // Ánh xạ từng phần tử từ database sang dạng DTO\r\n                .toList();                                 // Chuyển về dạng List\r\n\r\n        List<ProductHomeResponse> productHomeResponses = new ArrayList<>();\r\n\r\n        // 2. Xử lý dữ liệu và tạo các đối tượng ProductHomeResponse\r\n        for (int index = 0; index < productHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;  // Khắc phục biến index trong lambda expression (Java 8)\r\n\r\n            // 2.1. Tìm kiếm xem sản phẩm đã tồn tại trong danh sách kết quả chưa\r\n            var prdResponse = productHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n\r\n            if (prdResponse == null) {\r\n                // 2.2. Nếu chưa có, tạo mới ProductHomeResponse và thêm vào danh sách\r\n                prdResponse = productHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productHomeResponses.add(prdResponse);\r\n            } else {\r\n                // 2.3. Nếu đã có, so sánh giá và cập nhật giá tốt nhất cho sản phẩm đó\r\n                int i = productHomeResponses.indexOf(prdResponse);\r\n                productHomeResponses.get(i).comparePrice(productHomeResponseDtoList.get(finalIndex).getPrice());\r\n            }\r\n        }\r\n\r\n        // 3. Phân trang\r\n        Pageable pageable = PageRequest.of(page, 9);  // Tạo đối tượng phân trang (9 sản phẩm/trang)\r\n        int start = (int) pageable.getOffset(); // Vị trí bắt đầu của trang hiện tại\r\n        int end = Math.min((start + pageable.getPageSize()), productHomeResponses.size()); // Vị trí kết thúc, đảm bảo không vượt quá kích thước danh sách\r\n        List<ProductHomeResponse> pageContent = productHomeResponses.subList(start, end); // Lấy danh sách sản phẩm cho trang hiện tại\r\n\r\n        // 4. Trả về kết quả phân trang\r\n        return new PageImpl<>(pageContent, pageable, productHomeResponses.size());\r\n        // PageImpl là một implement của Page, chứa thông tin về danh sách sản phẩm, phân trang, và tổng số sản phẩm\r\n    }\r\n\r\n\r\n    @Override\r\n    public ProductDetailAndValueDiscountDto getProductDetailAndValueDiscount(Integer productDetailId) {\r\n//        ProductDetailAndValueDiscountDto productDetailAndValueDiscountDto = productViewRepository.getProductDetailDto(productDetailId);\r\n//        return productDetailAndValueDiscountDto;\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public ProductAndValueDiscountDto getProductAndValueDiscount(Integer productId) {\r\n        return productViewRepository.getProductDetailDto(productId);\r\n    }\r\n\r\n\r\n    @Override\r\n    public Float getValueDiscountByProductId(Integer productId) {\r\n        return productViewRepository.getValueDiscountByProductId(productId);\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> getRandomProductAndProductDiscount() {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.getAllProductAndDiscountResponseRandom()\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n            }\r\n        }\r\n\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal calculatePriceToPriceDiscount(BigDecimal price, Float value) {\r\n        if (value != null) {\r\n            BigDecimal valueConvert = BigDecimal.valueOf(value);\r\n            BigDecimal discount = price.multiply(valueConvert.divide(BigDecimal.valueOf(100)));\r\n            BigDecimal finalPriceDiscount = price.subtract(discount);\r\n            return finalPriceDiscount;\r\n        } else {\r\n            return price;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> setPriceDiscount(List<ProductDiscountHomeResponse> listProductDiscountHomeResponse) {\r\n        for (int i = 0; i < listProductDiscountHomeResponse.size(); i++) {\r\n            ProductDiscountHomeResponse productDiscountHomeResponse = new ProductDiscountHomeResponse();\r\n            productDiscountHomeResponse.setId(listProductDiscountHomeResponse.get(i).getId());\r\n            productDiscountHomeResponse.setValue(listProductDiscountHomeResponse.get(i).getValue());\r\n            productDiscountHomeResponse.setName(listProductDiscountHomeResponse.get(i).getName());\r\n            productDiscountHomeResponse.setPriceMax(listProductDiscountHomeResponse.get(i).getPriceMax());\r\n            productDiscountHomeResponse.setPriceMin(listProductDiscountHomeResponse.get(i).getPriceMin());\r\n            productDiscountHomeResponse.setPriceDiscountMax(calculatePriceToPriceDiscount(listProductDiscountHomeResponse.get(i).getPriceMax(), listProductDiscountHomeResponse.get(i).getValue()));\r\n            productDiscountHomeResponse.setPriceDiscountMin(calculatePriceToPriceDiscount(listProductDiscountHomeResponse.get(i).getPriceMin(), listProductDiscountHomeResponse.get(i).getValue()));\r\n            listProductDiscountHomeResponse.set(i, productDiscountHomeResponse);\r\n        }\r\n        return listProductDiscountHomeResponse;\r\n    }\r\n\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> getAllProductAndProductDiscountHomeResponse() {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.getAllProductAndDiscountResponseHome()\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n//                productDiscountHomeResponses.get(i).comparePriceDiscount(productDiscountHomeResponseDtoList.get(finalIndex).getPriceDiscount());\r\n//                productDiscountHomeResponses.get(i).comparePriceDiscount(calculatePriceToPriceDiscount(productDiscountHomeResponseDtoList.get(finalIndex).getPrice(), productDiscountHomeResponseDtoList.get(finalIndex).getValue()));\r\n            }\r\n        }\r\n        List<ProductDiscountHomeResponse> listProductDiscountResponse = new ArrayList<>();\r\n        int index = 1;\r\n        for (ProductDiscountHomeResponse producDiscounttHomeResponse : productDiscountHomeResponses) {\r\n            if (index <= 8) {\r\n                listProductDiscountResponse.add(producDiscounttHomeResponse);\r\n                index++;\r\n            }\r\n        }\r\n        return listProductDiscountResponse;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> getAllProductDiscountHomeResponse() {\r\n\r\n        // 1. Lấy danh sách các sản phẩm giảm giá (DTO) từ repository\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.getAllProductDiscountResponseHome()\r\n                .stream()                               // Chuyển đổi sang Stream để xử lý thuận tiện\r\n                .map(ProductDiscountHomeDtoImpl::toData)        // Ánh xạ mỗi DTO từ database sang dạng mong muốn\r\n                .toList();                                 // Chuyển đổi Stream thành List\r\n\r\n        // 2. Tạo một danh sách để lưu các sản phẩm đã xử lý\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n\r\n        // 3. Xử lý danh sách sản phẩm giảm giá\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;  // Tạo một biến final để sử dụng trong lambda expression\r\n\r\n            // 3.1. Tìm kiếm xem sản phẩm đã tồn tại trong danh sách kết quả chưa\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n\r\n            if (prdDiscountResponse == null) {\r\n                // 3.2. Nếu chưa tồn tại, tạo một ProductDiscountHomeResponse mới và thêm vào danh sách kết quả\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                // 3.3. Nếu đã tồn tại, so sánh giá và cập nhật giá tốt nhất cho sản phẩm đó\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n\r\n                // (Phần đã bị comment có thể dùng để so sánh và cập nhật giá giảm giá)\r\n            }\r\n        }\r\n\r\n        // 4. Tạo danh sách giới hạn 8 sản phẩm đầu tiên\r\n        List<ProductDiscountHomeResponse> listProductDiscountResponse = new ArrayList<>();\r\n        int index = 1;\r\n        for (ProductDiscountHomeResponse productDiscountHomeResponse : productDiscountHomeResponses) {\r\n            if (index <= 8) {\r\n                listProductDiscountResponse.add(productDiscountHomeResponse);\r\n                index++;\r\n            } else {\r\n                // Không thêm vào danh sách nếu đã đủ 8 sản phẩm\r\n                break;\r\n            }\r\n        }\r\n\r\n        // 5. Trả về danh sách tối đa 8 sản phẩm giảm giá\r\n        return listProductDiscountResponse;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> getAllProductAndProductDiscountShopResponse() {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.getAllProductAndProductDiscountDiscountShopResponse()\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n//                productDiscountHomeResponses.get(i).comparePriceDiscount(calculatePriceToPriceDiscount(productDiscountHomeResponseDtoList.get(finalIndex).getPrice(), productDiscountHomeResponseDtoList.get(finalIndex).getValue()));\r\n            }\r\n        }\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public List<SizeDetailResponse> getAllSizeDetailResponse(Integer productId) {\r\n        // 1. Lấy tất cả chi tiết sản phẩm (product detail) thuộc về sản phẩm (productId) và có trạng thái hoạt động (status = 1),\r\n        //    sắp xếp theo ngày cập nhật giảm dần.\r\n        List<ProductDetail> listProductDetail = productDetailRepository.findAllByProductIdAndStatusOrderByUpdateDateDesc(productId, 1);\r\n\r\n        // 2. Lấy danh sách tất cả các size có trong sản phẩm (productId).\r\n        List<Size> listSize = userSizeRepository.getSizeByProductId(productId);\r\n\r\n        // 3. Tạo một danh sách rỗng để lưu kết quả cuối cùng (danh sách SizeDetailResponse).\r\n        List<SizeDetailResponse> listSizeDetailResponse = new ArrayList<>();\r\n\r\n        // 4. Bắt đầu vòng lặp để xử lý từng chi tiết sản phẩm\r\n        for (int i = 0; i < listProductDetail.size(); i++) {\r\n            // 4.1. Lấy thông tin về size từ chi tiết sản phẩm hiện tại\r\n            var size = listProductDetail.get(i).getSize();\r\n\r\n            // 4.2. Lấy id của màu sắc từ chi tiết sản phẩm hiện tại\r\n            int colorId = listProductDetail.get(i).getColor().getId();\r\n\r\n            // 4.3. Kiểm tra xem size này đã được thêm vào danh sách kết quả chưa\r\n            var sizeDetailResponse = listSizeDetailResponse.stream().filter(el -> el.getId() == size.getId())\r\n                    .findFirst().orElse(null);\r\n\r\n            if (sizeDetailResponse == null) {\r\n                // 4.4. Nếu chưa có, tạo mới một SizeDetailResponse cho size này\r\n                sizeDetailResponse = new SizeDetailResponse();\r\n                sizeDetailResponse.setId(size.getId());    // Gán id của size\r\n                sizeDetailResponse.setName(size.getName()); // Gán tên của size\r\n\r\n                // 4.5. Tạo danh sách chứa colorId của size này (ban đầu chỉ có colorId hiện tại)\r\n                List<Integer> listColorId = new ArrayList<>();\r\n                listColorId.add(colorId);\r\n\r\n                // 4.6. Tạo danh sách chứa các thông tin chi tiết về sản phẩm (PropertiesResponse) của size và màu hiện tại\r\n                List<PropertiesResponse> propertiesResponseList = new ArrayList<>();\r\n                PropertiesResponse propertiesResponse = new PropertiesResponse();\r\n                propertiesResponse.setCode(listProductDetail.get(i).getCode()); // Mã sản phẩm chi tiết\r\n                propertiesResponse.setPrice(listProductDetail.get(i).getPrice()); // Giá gốc\r\n                propertiesResponse.setPriceDiscount(listProductDetail.get(i).getPriceDiscount()); // Giá giảm\r\n                propertiesResponse.setQuantity(listProductDetail.get(i).getQuantity()); // Số lượng\r\n                propertiesResponse.setId(colorId); // ID màu sắc\r\n                propertiesResponseList.add(propertiesResponse);\r\n\r\n                // 4.7. Gán danh sách colorId và propertiesResponseList cho SizeDetailResponse\r\n                sizeDetailResponse.setListColorId(listColorId);\r\n                sizeDetailResponse.setPropertiesResponseList(propertiesResponseList);\r\n                listSizeDetailResponse.add(sizeDetailResponse); // Thêm SizeDetailResponse mới vào danh sách kết quả\r\n            } else {\r\n                // 4.8. Nếu size đã tồn tại trong danh sách kết quả\r\n                int index = listSizeDetailResponse.indexOf(sizeDetailResponse);\r\n\r\n                // 4.9. Kiểm tra xem màu sắc đã có trong danh sách màu sắc của size chưa\r\n                if (!listSizeDetailResponse.get(index).getListColorId().contains(colorId)) {\r\n                    // Nếu chưa có, thêm colorId vào danh sách màu sắc của size\r\n                    listSizeDetailResponse.get(index).getListColorId().add(colorId);\r\n\r\n                    // Tạo PropertiesResponse mới cho màu sắc và sản phẩm chi tiết hiện tại\r\n                    PropertiesResponse propertiesResponse = new PropertiesResponse();\r\n                    propertiesResponse.setCode(listProductDetail.get(i).getCode());\r\n                    propertiesResponse.setPrice(listProductDetail.get(i).getPrice());\r\n                    propertiesResponse.setPriceDiscount(listProductDetail.get(i).getPriceDiscount());\r\n                    propertiesResponse.setQuantity(listProductDetail.get(i).getQuantity());\r\n                    propertiesResponse.setId(colorId);\r\n\r\n                    // Thêm PropertiesResponse mới vào danh sách propertiesResponseList của size\r\n                    listSizeDetailResponse.get(index).getPropertiesResponseList().add(propertiesResponse);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 5. Trả về danh sách SizeDetailResponse đã xử lý hoàn chỉnh\r\n        return listSizeDetailResponse;\r\n    }\r\n\r\n\r\n    @Override\r\n    public List<ColorDetailResponse> getAllColorDetailResponse(Integer productId) {\r\n        List<ProductDetail> listProductDetail = productDetailRepository.findAllByProductIdAndStatusOrderByUpdateDateDesc(productId, 1);\r\n        List<ColorDetailResponse> listColorDetailResponses = new ArrayList<>();\r\n        for (int i = 0; i < listProductDetail.size(); i++) {\r\n            var color = listProductDetail.get(i).getColor();\r\n            int sizeId = listProductDetail.get(i).getSize().getId();\r\n            var colorDetailResponse = listColorDetailResponses.stream().filter(el -> el.getId() == color.getId())\r\n                    .findFirst().orElse(null);\r\n            if (colorDetailResponse == null) {\r\n                colorDetailResponse = new ColorDetailResponse();\r\n                colorDetailResponse.setId(color.getId());\r\n                colorDetailResponse.setName(color.getName());\r\n                List<Integer> listSize = new ArrayList<>();\r\n                listSize.add(sizeId);\r\n                colorDetailResponse.setListSizeId(listSize);\r\n                listColorDetailResponses.add(colorDetailResponse);\r\n            } else {\r\n                int index = listColorDetailResponses.indexOf(colorDetailResponse);\r\n                if (!listColorDetailResponses.get(index).getListSizeId().contains(sizeId)) {\r\n                    listColorDetailResponses.get(index).getListSizeId().add(sizeId);\r\n                }\r\n            }\r\n        }\r\n        return listColorDetailResponses;\r\n    }\r\n\r\n\r\n    @Override\r\n    public BigDecimal getPriceMaxResponseByProductId(Integer productId) {\r\n        List<ProductDetail> listProductDetail = productDetailRepository.getAllProductDetailByProductIdOrderByPriceDesc(productId);\r\n        BigDecimal priceMax = listProductDetail.get(0).getPrice();\r\n        return priceMax;\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal getPriceMinResponseByProductId(Integer productId) {\r\n        List<ProductDetail> listProductDetail = productDetailRepository.getAllProductDetailByProductIdOrderByPriceAsc(productId);\r\n        BigDecimal priceMin = listProductDetail.get(0).getPrice();\r\n        return priceMin;\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal getPriceDiscountMaxResponseByProductId(Integer productId) {\r\n        List<ProductDetail> listProductDetail = productDetailRepository.getAllProductDetailByProductIdOrderByPriceDiscountDesc(productId);\r\n        BigDecimal priceMaxDiscount = listProductDetail.get(0).getPriceDiscount();\r\n        return priceMaxDiscount;\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal getPriceDiscountMinResponseByProductId(Integer productId) {\r\n        List<ProductDetail> listProductDetail = productDetailRepository.getAllProductDetailByProductIdOrderByPriceDiscountAsc(productId);\r\n        BigDecimal priceMinDiscount = listProductDetail.get(0).getPriceDiscount();\r\n        return priceMinDiscount;\r\n    }\r\n\r\n\r\n    public List<Integer> getStatusProductAndProductDiscount(Integer status) {\r\n        List<Integer> listStatus = null;\r\n        if (status == null) {\r\n            listStatus = new ArrayList<>();\r\n            listStatus.add(1);\r\n            listStatus.add(2);\r\n        } else if (status == 1) {\r\n            listStatus = new ArrayList<>();\r\n            listStatus.add(1);\r\n        } else if (status == 2) {\r\n            listStatus = new ArrayList<>();\r\n            listStatus.add(2);\r\n        }\r\n        return listStatus;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> searchProductAndProductDiscountShopResponse(\r\n            List<Integer> listBrandId, List<Integer> listCategoryId, List<Integer> listFormId, List<Integer> listMaterialId,\r\n            List<Integer> listSizeId, List<Integer> listColorId, String productNameSearch, BigDecimal priceMax,\r\n            BigDecimal priceMin, Integer status) {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.searchProductAndProductDiscountShopResponse(listBrandId, listCategoryId, listFormId, listMaterialId, listSizeId, listColorId, productNameSearch, priceMax, priceMin, getStatusProductAndProductDiscount(status))\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n            }\r\n        }\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> searchOnlyProductDiscountShopResponse(List<Integer> listBrandId, List<Integer> listCategoryId, List<Integer> listFormId, List<Integer> listMaterialId, List<Integer> listSizeId, List<Integer> listColorId, String productNameSearch, BigDecimal priceMax, BigDecimal priceMin) {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.searchOnlyProductDiscountShopResponse(listBrandId, listCategoryId, listFormId, listMaterialId, listSizeId, listColorId, productNameSearch, priceMax, priceMin)\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n            }\r\n        }\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public Page<ProductDiscountHomeResponse> convertlistToPage(List<ProductDiscountHomeResponse> listProductDiscount, int page) {\r\n        Pageable pageable = PageRequest.of(page, 9);\r\n        int start = (int) pageable.getOffset();\r\n        int end = Math.min((start + pageable.getPageSize()), listProductDiscount.size());\r\n        List<ProductDiscountHomeResponse> pageContent = listProductDiscount.subList(start, end);\r\n        return new PageImpl<>(pageContent, pageable, listProductDiscount.size());\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> searchProductAndProductDiscountDescShopResponse(\r\n            List<Integer> listBrandId, List<Integer> listCategoryId, List<Integer> listFormId, List<Integer> listMaterialId,\r\n            List<Integer> listSizeId, List<Integer> listColorId, String productNameSearch, BigDecimal priceMax,\r\n            BigDecimal priceMin, Integer status) {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.searchProductAndProductDiscountDescResponse(\r\n                listBrandId, listCategoryId, listFormId, listMaterialId, listSizeId, listColorId, productNameSearch, priceMax, priceMin, getStatusProductAndProductDiscount(status))\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n            }\r\n        }\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDiscountHomeResponse> searchProductAndProductDiscountAscShopResponse(List<Integer> listBrandId, List<Integer> listCategoryId, List<Integer> listFormId, List<Integer> listMaterialId, List<Integer> listSizeId, List<Integer> listColorId, String productNameSearch, BigDecimal priceMax, BigDecimal priceMin, Integer status) {\r\n        List<ProductDiscountHomeDtoImpl> productDiscountHomeResponseDtoList = productViewRepository.searchProductAndProductDiscountAscResponse(listBrandId, listCategoryId, listFormId, listMaterialId, listSizeId, listColorId, productNameSearch, priceMax, priceMin, getStatusProductAndProductDiscount(status))\r\n                .stream().map(ProductDiscountHomeDtoImpl::toData).toList();\r\n        List<ProductDiscountHomeResponse> productDiscountHomeResponses = new ArrayList<>();\r\n        for (int index = 0; index < productDiscountHomeResponseDtoList.size(); index++) {\r\n            int finalIndex = index;\r\n            ProductDiscountHomeResponse prdDiscountResponse = productDiscountHomeResponses.stream()\r\n                    .filter(e -> e.getId().intValue() == productDiscountHomeResponseDtoList.get(finalIndex).getProductId().intValue())\r\n                    .findFirst().orElse(null);\r\n            if (prdDiscountResponse == null) {\r\n                prdDiscountResponse = productDiscountHomeResponseDtoList.get(finalIndex).toResponse();\r\n                productDiscountHomeResponses.add(prdDiscountResponse);\r\n            } else {\r\n                int i = productDiscountHomeResponses.indexOf(prdDiscountResponse);\r\n                productDiscountHomeResponses.get(i).comparePrice(productDiscountHomeResponseDtoList.get(finalIndex).getPrice());\r\n//                productDiscountHomeResponses.get(i).comparePriceDiscount(calculatePriceToPriceDiscount(productDiscountHomeResponseDtoList.get(finalIndex).getPrice(), productDiscountHomeResponseDtoList.get(finalIndex).getValue()));\r\n            }\r\n        }\r\n        return productDiscountHomeResponses;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListColor(List<Integer> listColorId) {\r\n        if (listColorId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listColorId) {\r\n            prefix = new StringBuilder(\"&listColorId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListSize(List<Integer> listSizeId) {\r\n        if (listSizeId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listSizeId) {\r\n            prefix = new StringBuilder(\"&listSizeId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListCategory(List<Integer> listCategoryId) {\r\n        if (listCategoryId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listCategoryId) {\r\n            prefix = new StringBuilder(\"&listCategoryId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListForm(List<Integer> listFormId) {\r\n        if (listFormId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listFormId) {\r\n            prefix = new StringBuilder(\"&listFormId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListMaterial(List<Integer> listMaterialId) {\r\n        if (listMaterialId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listMaterialId) {\r\n            prefix = new StringBuilder(\"&listMaterialId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public StringBuilder pageListBrand(List<Integer> listBrandId) {\r\n        if (listBrandId == null) {\r\n            return new StringBuilder(\"\");\r\n        }\r\n        StringBuilder prefix = new StringBuilder(\"\");\r\n        StringBuilder fullPage = new StringBuilder(\"\");\r\n        for (Integer integer : listBrandId) {\r\n            prefix = new StringBuilder(\"&listBrandId=\");\r\n            prefix.append(integer);\r\n            fullPage.append(prefix);\r\n        }\r\n        return fullPage;\r\n    }\r\n\r\n    @Override\r\n    public List<Integer> removeNullValueInList(List<Integer> list) {\r\n        if (list == null || list.size() == 0) {\r\n            return null;\r\n        } else {\r\n            list.removeIf(Objects::isNull);\r\n            return list;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal getPriceMaxBySelected(Integer price) {\r\n        if (price == null) {\r\n            return BigDecimal.valueOf(Integer.MAX_VALUE);\r\n        } else if (price == 1) {\r\n            return BigDecimal.valueOf(100000);\r\n        } else if (price == 2) {\r\n            return BigDecimal.valueOf(500000);\r\n        } else if (price == 3) {\r\n            return BigDecimal.valueOf(1000000);\r\n        } else if (price == 4) {\r\n            return BigDecimal.valueOf(5000000);\r\n        } else if (price == 5) {\r\n            return BigDecimal.valueOf(10000000);\r\n        } else if (price == 6) {\r\n            return BigDecimal.valueOf(50000000);\r\n        } else if (price == 7) {\r\n            return BigDecimal.valueOf(100000000);\r\n        } else if (price == 8) {\r\n            return BigDecimal.valueOf(500000000);\r\n        } else if (price == 9) {\r\n            return BigDecimal.valueOf(Integer.MAX_VALUE);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public BigDecimal getPriceMinBySelected(Integer price) {\r\n        if (price == null) {\r\n            return BigDecimal.valueOf(0);\r\n        } else if (price == 1) {\r\n            return BigDecimal.valueOf(0);\r\n        } else if (price == 2) {\r\n            return BigDecimal.valueOf(100000);\r\n        } else if (price == 3) {\r\n            return BigDecimal.valueOf(500000);\r\n        } else if (price == 4) {\r\n            return BigDecimal.valueOf(1000000);\r\n        } else if (price == 5) {\r\n            return BigDecimal.valueOf(5000000);\r\n        } else if (price == 6) {\r\n            return BigDecimal.valueOf(10000000);\r\n        } else if (price == 7) {\r\n            return BigDecimal.valueOf(50000000);\r\n        } else if (price == 8) {\r\n            return BigDecimal.valueOf(100000000);\r\n        } else if (price == 9) {\r\n            return BigDecimal.valueOf(500000000);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java b/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java
--- a/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java	(revision 248d4686571e97f9f62b73e8164c8f71d2514cd3)
+++ b/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java	(date 1725270782455)
@@ -113,6 +113,7 @@
 
     @Override
     public Float getValueDiscountByProductId(Integer productId) {
+        var a = productViewRepository.getValueDiscountByProductId(productId);
         return productViewRepository.getValueDiscountByProductId(productId);
     }
 
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url=jdbc:sqlserver://localhost;databaseName=GymTiger_DB;\r\nspring.datasource.username=sa\r\nspring.datasource.password=190403\r\nspring.jpa.show-sql=false\r\nspring.jpa.hibernate.ddl-auto=none\r\nspring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\r\n\r\nspring.web.resources.static-locations=classpath:/static/\r\nspring.thymeleaf.prefix= classpath:/templates/\r\nspring.thymeleaf.suffix= .html\r\nserver.port=3000\r\n\r\nthymeleaf.layout.prefix=classpath:/templates/\r\nthymeleaf.layout.suffix=.html\r\nthymeleaf.layout.enable=true\r\nthymeleaf.layout.dialect-prefix=layout\r\n\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=quocndph26573@fpt.edu.vn\r\nspring.mail.password=tnoi qsje ixfw vjkl\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\n\r\nspring.thymeleaf.cache=false\r\nspring.thymeleaf.mode=LEGACYHTML5\r\nspring.thymeleaf.templates_root=src/main/resources/templates/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 248d4686571e97f9f62b73e8164c8f71d2514cd3)
+++ b/src/main/resources/application.properties	(date 1725270042876)
@@ -1,4 +1,4 @@
-spring.datasource.url=jdbc:sqlserver://localhost;databaseName=GymTiger_DB;
+spring.datasource.url=jdbc:sqlserver://DESKTOP-SS0MK87;databaseName=GymTiger_DB;
 spring.datasource.username=sa
 spring.datasource.password=190403
 spring.jpa.show-sql=false
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"26a404a7-46ce-47e3-8dda-c9c95e4f9e2d\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\">\r\n    <execution />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"17898806c17b5a0d8e4ae944ab34dac8594bdbf2\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"C:\\xampp\\php\\php.exe\" />\r\n  <component name=\"ProjectId\" id=\"2kza9B6qhwpQwmhKeaaeeoNFrCh\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RequestMappingsPanelOrder0\" value=\"0\" />\r\n    <property name=\"RequestMappingsPanelOrder1\" value=\"1\" />\r\n    <property name=\"RequestMappingsPanelWidth0\" value=\"75\" />\r\n    <property name=\"RequestMappingsPanelWidth1\" value=\"75\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../GymTiger\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propVCSSupport.Mappings\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\DOWLOAD\\GymTiger (1)\\GymTiger\\src\\main\\resources\\templates\\employee\" />\r\n      <recent name=\"D:\\DOWLOAD\\GymTiger (1)\\GymTiger\\src\\main\\resources\\templates\\admin\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\DOWLOAD\\GymTiger (1)\\GymTiger\\src\\main\\resources\\templates\\employee\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Spring Boot.GymTigerApplication (1)\">\r\n    <configuration default=\"true\" type=\"ArquillianTestNG\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"GymTigerApplication (1)\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"CodeDao\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.sd38.gymtiger.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.sd38.gymtiger.GymTigerApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"GymTigerApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"GymTiger\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.sd38.gymtiger.GymTigerApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Spring Boot.GymTigerApplication (1)\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"26a404a7-46ce-47e3-8dda-c9c95e4f9e2d\" name=\"Changes\" comment=\"\" />\r\n      <created>1724288705778</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1724288705778</updated>\r\n      <workItem from=\"1724288707116\" duration=\"8034000\" />\r\n      <workItem from=\"1724302824135\" duration=\"7469000\" />\r\n      <workItem from=\"1724377205934\" duration=\"3808000\" />\r\n      <workItem from=\"1724424967637\" duration=\"2869000\" />\r\n      <workItem from=\"1724485896981\" duration=\"2781000\" />\r\n      <workItem from=\"1724513455090\" duration=\"4900000\" />\r\n      <workItem from=\"1724593674570\" duration=\"1274000\" />\r\n      <workItem from=\"1724669662918\" duration=\"5825000\" />\r\n      <workItem from=\"1724722298076\" duration=\"1259000\" />\r\n      <workItem from=\"1724727547279\" duration=\"9282000\" />\r\n      <workItem from=\"1724739498309\" duration=\"752000\" />\r\n      <workItem from=\"1724746544679\" duration=\"1465000\" />\r\n      <workItem from=\"1724757098142\" duration=\"1825000\" />\r\n      <workItem from=\"1724805505857\" duration=\"30000\" />\r\n      <workItem from=\"1724849461596\" duration=\"1281000\" />\r\n      <workItem from=\"1724907151352\" duration=\"1444000\" />\r\n      <workItem from=\"1725025356284\" duration=\"1524000\" />\r\n      <workItem from=\"1725110119109\" duration=\"3064000\" />\r\n      <workItem from=\"1725124978550\" duration=\"3189000\" />\r\n      <workItem from=\"1725165109328\" duration=\"8676000\" />\r\n      <workItem from=\"1725189830230\" duration=\"1458000\" />\r\n      <workItem from=\"1725191468661\" duration=\"1522000\" />\r\n      <workItem from=\"1725241825429\" duration=\"17000\" />\r\n      <workItem from=\"1725241999078\" duration=\"10626000\" />\r\n      <workItem from=\"1725252828522\" duration=\"4262000\" />\r\n      <workItem from=\"1725260857367\" duration=\"163000\" />\r\n      <workItem from=\"1725261044476\" duration=\"170000\" />\r\n      <workItem from=\"1725261323755\" duration=\"2831000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/admin/ProductDetailController.java</url>\r\n          <line>42</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/admin/ProductDetailController.java</url>\r\n          <line>71</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/admin/ProductDetailController.java</url>\r\n          <line>94</line>\r\n          <option name=\"timeStamp\" value=\"5\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/admin/ProductDetailController.java</url>\r\n          <line>75</line>\r\n          <option name=\"timeStamp\" value=\"7\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/user/HomeController.java</url>\r\n          <line>244</line>\r\n          <option name=\"timeStamp\" value=\"10\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 248d4686571e97f9f62b73e8164c8f71d2514cd3)
+++ b/.idea/workspace.xml	(date 1725271283209)
@@ -4,7 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="26a404a7-46ce-47e3-8dda-c9c95e4f9e2d" name="Changes" comment="" />
+    <list default="true" id="26a404a7-46ce-47e3-8dda-c9c95e4f9e2d" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/repository/user/ProductViewRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/repository/user/ProductViewRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.class" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -39,20 +46,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="RequestMappingsPanelOrder0" value="0" />
-    <property name="RequestMappingsPanelOrder1" value="1" />
-    <property name="RequestMappingsPanelWidth0" value="75" />
-    <property name="RequestMappingsPanelWidth1" value="75" />
-    <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="aspect.path.notification.shown" value="true" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/../GymTiger" />
-    <property name="node.js.detected.package.eslint" value="true" />
-    <property name="node.js.path.for.package.eslint" value="project" />
-    <property name="node.js.selected.package.eslint" value="(autodetect)" />
-    <property name="restartRequiresConfirmation" value="false" />
-    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.Mappings" />
-  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RequestMappingsPanelOrder0": "0",
+    "RequestMappingsPanelOrder1": "1",
+    "RequestMappingsPanelWidth0": "75",
+    "RequestMappingsPanelWidth1": "75",
+    "Spring Boot.GymTigerApplication.executor": "Run",
+    "git-widget-placeholder": "Thang",
+    "node.js.selected.package.tslint": "(autodetect)"
+  }
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="D:\DOWLOAD\GymTiger (1)\GymTiger\src\main\resources\templates\employee" />
@@ -62,7 +66,7 @@
       <recent name="D:\DOWLOAD\GymTiger (1)\GymTiger\src\main\resources\templates\employee" />
     </key>
   </component>
-  <component name="RunManager" selected="Spring Boot.GymTigerApplication (1)">
+  <component name="RunManager" selected="Spring Boot.GymTigerApplication">
     <configuration default="true" type="ArquillianTestNG" factoryName="" nameIsGenerated="true">
       <option name="arquillianRunConfiguration">
         <value>
@@ -78,13 +82,13 @@
     </configuration>
     <configuration name="GymTigerApplication (1)" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" temporary="true" nameIsGenerated="true">
       <module name="CodeDao" />
+      <option name="SPRING_BOOT_MAIN_CLASS" value="com.sd38.gymtiger.GymTigerApplication" />
       <extension name="coverage">
         <pattern>
           <option name="PATTERN" value="com.sd38.gymtiger.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="SPRING_BOOT_MAIN_CLASS" value="com.sd38.gymtiger.GymTigerApplication" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -179,6 +183,36 @@
           <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/user/HomeController.java</url>
           <line>244</line>
           <option name="timeStamp" value="10" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/user/HomeController.java</url>
+          <line>206</line>
+          <option name="timeStamp" value="11" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java</url>
+          <line>116</line>
+          <option name="timeStamp" value="12" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/user/HomeController.java</url>
+          <line>221</line>
+          <option name="timeStamp" value="13" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/controller/user/HomeController.java</url>
+          <line>220</line>
+          <option name="timeStamp" value="14" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java</url>
+          <line>117</line>
+          <option name="timeStamp" value="16" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/com/sd38/gymtiger/service/impl/user/ProductViewServiceImpl.java</url>
+          <line>115</line>
+          <option name="timeStamp" value="17" />
         </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
Index: target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url=jdbc:sqlserver://localhost;databaseName=GymTiger_DB;\r\nspring.datasource.username=sa\r\nspring.datasource.password=190403\r\nspring.jpa.show-sql=false\r\nspring.jpa.hibernate.ddl-auto=none\r\nspring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\r\n\r\nspring.web.resources.static-locations=classpath:/static/\r\nspring.thymeleaf.prefix= classpath:/templates/\r\nspring.thymeleaf.suffix= .html\r\nserver.port=3000\r\n\r\nthymeleaf.layout.prefix=classpath:/templates/\r\nthymeleaf.layout.suffix=.html\r\nthymeleaf.layout.enable=true\r\nthymeleaf.layout.dialect-prefix=layout\r\n\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=quocndph26573@fpt.edu.vn\r\nspring.mail.password=tnoi qsje ixfw vjkl\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\n\r\nspring.thymeleaf.cache=false\r\nspring.thymeleaf.mode=LEGACYHTML5\r\nspring.thymeleaf.templates_root=src/main/resources/templates/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/application.properties b/target/classes/application.properties
--- a/target/classes/application.properties	(revision 248d4686571e97f9f62b73e8164c8f71d2514cd3)
+++ b/target/classes/application.properties	(date 1725270045647)
@@ -1,4 +1,4 @@
-spring.datasource.url=jdbc:sqlserver://localhost;databaseName=GymTiger_DB;
+spring.datasource.url=jdbc:sqlserver://DESKTOP-SS0MK87;databaseName=GymTiger_DB;
 spring.datasource.username=sa
 spring.datasource.password=190403
 spring.jpa.show-sql=false
